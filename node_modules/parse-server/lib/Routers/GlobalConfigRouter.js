"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GlobalConfigRouter = void 0;
var _node = _interopRequireDefault(require("parse/node"));
var _PromiseRouter = _interopRequireDefault(require("../PromiseRouter"));
var middleware = _interopRequireWildcard(require("../middlewares"));
var triggers = _interopRequireWildcard(require("../triggers"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
// global_config.js

const getConfigFromParams = params => {
  const config = new _node.default.Config();
  for (const attr in params) {
    config.attributes[attr] = _node.default._decode(undefined, params[attr]);
  }
  return config;
};
class GlobalConfigRouter extends _PromiseRouter.default {
  getGlobalConfig(req) {
    return req.config.database.find('_GlobalConfig', {
      objectId: '1'
    }, {
      limit: 1
    }).then(results => {
      if (results.length != 1) {
        // If there is no config in the database - return empty config.
        return {
          response: {
            params: {}
          }
        };
      }
      const globalConfig = results[0];
      if (!req.auth.isMaster && globalConfig.masterKeyOnly !== undefined) {
        for (const param in globalConfig.params) {
          if (globalConfig.masterKeyOnly[param]) {
            delete globalConfig.params[param];
            delete globalConfig.masterKeyOnly[param];
          }
        }
      }
      return {
        response: {
          params: globalConfig.params,
          masterKeyOnly: globalConfig.masterKeyOnly
        }
      };
    });
  }
  async updateGlobalConfig(req) {
    if (req.auth.isReadOnly) {
      throw new _node.default.Error(_node.default.Error.OPERATION_FORBIDDEN, "read-only masterKey isn't allowed to update the config.");
    }
    const params = req.body.params;
    const masterKeyOnly = req.body.masterKeyOnly || {};
    // Transform in dot notation to make sure it works
    const update = Object.keys(params).reduce((acc, key) => {
      acc[`params.${key}`] = params[key];
      acc[`masterKeyOnly.${key}`] = masterKeyOnly[key] || false;
      return acc;
    }, {});
    const className = triggers.getClassName(_node.default.Config);
    const hasBeforeSaveHook = triggers.triggerExists(className, triggers.Types.beforeSave, req.config.applicationId);
    const hasAfterSaveHook = triggers.triggerExists(className, triggers.Types.afterSave, req.config.applicationId);
    let originalConfigObject;
    let updatedConfigObject;
    const configObject = new _node.default.Config();
    configObject.attributes = params;
    const results = await req.config.database.find('_GlobalConfig', {
      objectId: '1'
    }, {
      limit: 1
    });
    const isNew = results.length !== 1;
    if (!isNew && (hasBeforeSaveHook || hasAfterSaveHook)) {
      originalConfigObject = getConfigFromParams(results[0].params);
    }
    try {
      await triggers.maybeRunGlobalConfigTrigger(triggers.Types.beforeSave, req.auth, configObject, originalConfigObject, req.config, req.context);
      if (isNew) {
        await req.config.database.update('_GlobalConfig', {
          objectId: '1'
        }, update, {
          upsert: true
        }, true);
        updatedConfigObject = configObject;
      } else {
        const result = await req.config.database.update('_GlobalConfig', {
          objectId: '1'
        }, update, {}, true);
        updatedConfigObject = getConfigFromParams(result.params);
      }
      await triggers.maybeRunGlobalConfigTrigger(triggers.Types.afterSave, req.auth, updatedConfigObject, originalConfigObject, req.config, req.context);
      return {
        response: {
          result: true
        }
      };
    } catch (err) {
      const error = triggers.resolveError(err, {
        code: _node.default.Error.SCRIPT_FAILED,
        message: 'Script failed. Unknown error.'
      });
      throw error;
    }
  }
  mountRoutes() {
    this.route('GET', '/config', req => {
      return this.getGlobalConfig(req);
    });
    this.route('PUT', '/config', middleware.promiseEnforceMasterKeyAccess, req => {
      return this.updateGlobalConfig(req);
    });
  }
}
exports.GlobalConfigRouter = GlobalConfigRouter;
var _default = exports.default = GlobalConfigRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,